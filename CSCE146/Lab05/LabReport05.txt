1. Problem: The problem is that a first-come-first-serve process schedule needs to be made using a queue system.
2. Solution Description: The first thing I did was create the Process class, then I copied over the QueueI and LLQueue classes from when I made them during lecture. Then, I put together the ProcessScheduler class by following the instructions step-by-step.
3. Problems Encountered: I'm still unsure if I did the cancelCurrentProcess method properly. What I read in the instructions made it seem like it did the exact same thing as runNextProcess but described in different words. The code ended up functioning fine at the end, so I decided not to touch the cancelCurrentProcess method again. I also had to refamiliarize myself with queues as I had forgotten a lot of the details since the lecture.
4. A queue is structured as a list, in this case a linked list (but could be any form of list, like an array). It has four main functions: enqueue, dequeue, peek, and print. Enqueue adds something to the end of the list, dequeue removes something from the front of the list and moves everything up, peek gets the data at the front of the list, and print prints the list in whole.
5. A queue is appropriate to use when creating something that has to happen procedurally and chronologically.
6. One important task that uses queues is printing, where pages and documents are printed first-in, first-out. Another example is when uploading multiple files at once, especially images. The first file is processed first, the second second, so on.
7. [H]5, 25, 35, 45, 55, 22[T]
8. "n" "o"[T] NULL NULL NULL NULL [H]"j" "k" "m" "n"
9. This method does not function because head refers to the item stored in the head, not the position it is in. To fix this, they need to grab the location of the head using an indexOf implementation (although arrays do not have an indexOf innately, one can be programmed using a for-loop that checks for the value), then use that as the start.
10. This doesn't work properly for two reasons. One is that temp is never changing, as they use head = head.link; when they should be using temp = temp.link; in the while loop. The other reason is that 'false' is never being returned if aValue isn't found in the list, so return false; needs to be added at the end, outside of the while loop.